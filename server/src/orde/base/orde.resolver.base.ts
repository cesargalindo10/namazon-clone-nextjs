/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateOrdeArgs } from "./CreateOrdeArgs";
import { UpdateOrdeArgs } from "./UpdateOrdeArgs";
import { DeleteOrdeArgs } from "./DeleteOrdeArgs";
import { OrdeCountArgs } from "./OrdeCountArgs";
import { OrdeFindManyArgs } from "./OrdeFindManyArgs";
import { OrdeFindUniqueArgs } from "./OrdeFindUniqueArgs";
import { Orde } from "./Orde";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { User } from "../../user/base/User";
import { OrdeService } from "../orde.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Orde)
export class OrdeResolverBase {
  constructor(
    protected readonly service: OrdeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Orde",
    action: "read",
    possession: "any",
  })
  async _ordesMeta(
    @graphql.Args() args: OrdeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Orde])
  @nestAccessControl.UseRoles({
    resource: "Orde",
    action: "read",
    possession: "any",
  })
  async ordes(@graphql.Args() args: OrdeFindManyArgs): Promise<Orde[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Orde, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Orde",
    action: "read",
    possession: "own",
  })
  async orde(@graphql.Args() args: OrdeFindUniqueArgs): Promise<Orde | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Orde)
  @nestAccessControl.UseRoles({
    resource: "Orde",
    action: "create",
    possession: "any",
  })
  async createOrde(@graphql.Args() args: CreateOrdeArgs): Promise<Orde> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Orde)
  @nestAccessControl.UseRoles({
    resource: "Orde",
    action: "update",
    possession: "any",
  })
  async updateOrde(@graphql.Args() args: UpdateOrdeArgs): Promise<Orde | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Orde)
  @nestAccessControl.UseRoles({
    resource: "Orde",
    action: "delete",
    possession: "any",
  })
  async deleteOrde(@graphql.Args() args: DeleteOrdeArgs): Promise<Orde | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Product], { name: "products" })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async resolveFieldProducts(
    @graphql.Parent() parent: Orde,
    @graphql.Args() args: ProductFindManyArgs
  ): Promise<Product[]> {
    const results = await this.service.findProducts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldUser(@graphql.Parent() parent: Orde): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
